package shammel.classes{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	import shammel.classes.*;		[SWF(width="900", height="700", backgroundColor="#080808", frameRate="30")]		public class Document extends Sprite	{		var xmlLoader:URLLoader;		var xmlURL:URLRequest =			new URLRequest("xml/portfolio.xml?v=" + new Date().time);		var xml:XML;		var settings:XMLList;		var projects:XMLList;		var pData:Object =				new Object();		var hex:String =				"0x";		var preloader:PreloadBar;		var preloadedImages:Array =		new Array();		//var tweenSpd:Number =			1;		var scrollbar:ScrollbarH;		var portfolio:Portfolio;		var projectImage:ProjectImage;		var imageLoader:Loader;		var xIndex:Number =				0;		var imagesLoaded:uint =			0;		var progressArray:Array =		new Array();		var totalProgress:Number =		0;		var progressHolder:Number;		var imagesComplete:uint;		var resumePosition:Array;				public function Document():void		{			include "../includes/by_shammel.as";			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						xmlLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, function(e:Event):void			{				xml = new XML(e.target.data);				parseXML();			});			xmlLoader.load(xmlURL);					}				function parseXML():void		{			settings =						xml.settings;			projects =						xml.projects;			pData.bgColor =					uint(hex + settings.backgroundColor.@value);			adjustBackground();			pData.preloaderFGColor =		uint(hex + settings.preloaderForegroundColor.@value);			pData.preloaderFGColor2 =		uint(hex + settings.preloaderForegroundColor2.@value);			pData.preloaderBGColor =		uint(hex + settings.preloaderBackgroundColor.@value);			pData.preloaderWidth =			Number(settings.preloaderWidth.@value);			pData.preloaderHeight =			Number(settings.preloaderHeight.@value);			pData.color1 =					uint(hex + settings.color1.@value);			pData.color2 =					uint(hex + settings.color2.@value);			pData.color3 =					uint(hex + settings.color3.@value);			pData.trackColor =				uint(hex + settings.trackColor.@value);			pData.thumbColor =				uint(hex + settings.thumbColor.@value);			pData.thumbWidth =				Number(settings.thumbWidth.@value);			pData.thumbRadius =				Number(settings.thumbRadius.@value);			pData.scrollbarHeight =			Number(settings.scrollbarHeight.@value);			pData.scrollbarSidePadding =	Number(settings.scrollbarSidePadding.@value);			pData.scrollbarTopPadding =		Number(settings.scrollbarTopPadding.@value);			pData.glide =					Number(settings.scrollbarGlide.@value);			pData.tweenSpd =				Number(settings.tweenSpeed.@value);			pData.padding =					Number(settings.padding.@value);			pData.resumeLabel =				String(settings.resume.@label);			pData.resumeURL =				String(settings.resume.@url);			pData.artistName =				String(settings.artist.@name);			pData.artistCo =				String(settings.artist.@company);			pData.artistEmail =				String(settings.artist.@email);			pData.artistPhone =				String(settings.artist.@phone);			pData.artistBio =				String(settings.artistBio.text());			pData.textfieldWidth =			Number(settings.textfieldWidth.@value);				pData.textfieldLeftMargin =		Number(settings.textfieldLeftMargin.@value);			pData.fontSize =				Number(settings.fontSize.@value);			pData.textfieldBottomMargin =	Number(settings.textfieldBottomMargin.@value);			pData.textfieldLeading =		Number(settings.textfieldLeading.@value);			pData.textfieldLetterSpacing =	Number(settings.textfieldLetterSpacing.@value);			pData.infoCardRightMargin =		Number(settings.artistInfoRightMargin.@value);			pData.projectLabelTopMargin =	Number(settings.projectLabelTopMargin.@value);			pData.portfolioHeight =			Number(settings.portfolioHeight.@value);			pData.imageDirectory =			String(settings.imageDirectory.@value) + "/";			pData.preloadedImages =			uint(settings.preloadedImages.@value);			pData.artworkSpacing =			Number(settings.artworkSpacing.@value);			pData.projectSpacing =			Number(settings.projectSpacing.@value);			pData.categoryFontSize =		Number(settings.categoryFontSize.@value);			pData.categoryFontColor =		uint(hex + settings.categoryFontColor.@value);			pData.categoryLineWeight =		Number(settings.categoryLineWeight.@value);			pData.categoryLineColor =		uint(hex + settings.categoryLineColor.@value);			pData.projects =				projects;						//adjustBackground();			addPreloader();			//loadLastImages();			preloadContent();					}				//addPreloader function		function addPreloader():void		{			preloader = new PreloadBar(pData.preloaderFGColor, pData.preloaderFGColor2, pData.preloaderBGColor, pData.preloaderWidth, pData.preloaderHeight);			preloader.x = stage.stageWidth/2 - preloader.width/2;			preloader.y = stage.stageHeight/2 - preloader.height/2;			addChild(preloader);		}				//loadLastImages function		function loadLastImages():void		{			for(var l:uint = 1;l < uint(pData.projects.section[uint(pData.projects.section.length() - 1)].project[uint(pData.projects.section[uint(pData.projects.section.length()) - 1].project.length()) - 1].@numberOfImages) + 1;l++)			{				imageLoader = new Loader();				imageLoader.load(new URLRequest(pData.imageDirectory + pData.projects.section[uint(pData.projects.section.length() - 1)].project[uint(pData.projects.section[uint(pData.projects.section.length()) - 1].project.length()) - 1].@imagePrefix + l + "." + pData.projects.section[uint(pData.projects.section.length() - 1)].@imageFormat));								//trace(pData.imageDirectory + pData.projects.section[uint(pData.projects.section.length() - 1)].project[uint(pData.projects.section[uint(pData.projects.section.length()) - 1].project.length()) - 1].@imagePrefix + l + "." + pData.projects.section[uint(pData.projects.section.length() - 1)].@imageFormat);			}		}				//preloadContent function… remember to abstract this into a class for reuse		function preloadContent():void		{			resumePosition = new Array();			resumePosition[0] = 0;			resumePosition[1] = 0;			resumePosition[2] = 0;						for(var a:uint = 0;a < pData.projects.section.length();a++)			{				for(var b:uint = 0;b < pData.projects.section[a].project.length();b++)				{					for(var c:uint = 1;c < uint(pData.projects.section[a].project[b].@numberOfImages) + 1;c++)					{						if(imagesLoaded < pData.preloadedImages + 1)						{							if(imagesLoaded < pData.preloadedImages)							{								projectImage = new ProjectImage();								preloadedImages[imagesLoaded] = projectImage;								preloadedImages[imagesLoaded].imageLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loaderProgress);								preloadedImages[imagesLoaded].imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, updateCompleteImages);								preloadedImages[imagesLoaded].imageLoader.load(new URLRequest(pData.imageDirectory + pData.projects.section[a].project[b].@imagePrefix + c + "." + pData.projects.section[a].@imageFormat));																//trace(pData.imageDirectory + pData.projects.section[a].project[b].@imagePrefix + c + "." + pData.projects.section[a].@imageFormat);								//trace("last loaded image:" + a + "|" + b + "|" + c);							}							imagesLoaded++;							resumePosition[0] = a;							resumePosition[1] = b;							resumePosition[2] = c;						}					}				}			}			//trace(resumePosition);						/*for(var a:uint = 0;a < 2;a++)			{				for(var b:uint = 0; b < 4;b++)				{					for(var c:uint = 1;c < 4;c++)					{						if(imagesLoaded < 13)						{							if(imagesLoaded < 12)							{								trace(a + "|" + b + "|" + c);							}							imagesLoaded++;							trace("start with:" + a + "|" + b + "|" + c);						}					}				}			}*/						//trace(loadPosition);		}						//loaderProgress function… remember to abstract this into a class for reuse		function loaderProgress(e:ProgressEvent):void		{			getTotalProgress();		}				function getTotalProgress():void		{			for(var i:uint = 0;i < pData.preloadedImages;i++)			{				if(preloadedImages[i].imageLoader.contentLoaderInfo.bytesLoaded/preloadedImages[i].imageLoader.contentLoaderInfo.bytesTotal > 0)				{					//trace(preloadedImages[i + 1].contentLoaderInfo.bytesLoaded/preloadedImages[i + 1].contentLoaderInfo.bytesTotal);					totalProgress += preloadedImages[i].imageLoader.contentLoaderInfo.bytesLoaded/preloadedImages[i].imageLoader.contentLoaderInfo.bytesTotal;				}			}			progressHolder = totalProgress/pData.preloadedImages;			totalProgress = 0;			preloader.updateProgress(progressHolder);			//trace(progressHolder * 100);		}				function updateCompleteImages(e:Event):void		{			//trace(progressHolder);			imagesComplete++;			if(progressHolder == 1 && imagesComplete == pData.preloadedImages)			{				Tweener.addTween(preloader, {y:preloader.y - 50, alpha:0, time:pData.tweenSpd, onComplete:function():void				{					init();				}});				//trace("complete");				//init();			}					}								/*								function loaderProgress(e:ProgressEvent):void		{			//trace(preloadedImages.loader1.contentLoaderInfo.bytesLoaded);			//e.currentTarget.loader.name = 			//trace(e.currentTarget.bytesLoaded/e.currentTarget.bytesTotal);			//addChild(preloadedImages[preloadedImages.length - 1]);			trace("gtp function called");			getTotalProgress();		}				function getTotalProgress():void		{			for(var i:uint = 0;i < pData.preloadedImages;i++)			{				if(preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesLoaded/preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesTotal > 0)				{					//trace(preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesLoaded/preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesTotal);					totalProgress += preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesLoaded/preloadedImages["loader" + (i + 1)].contentLoaderInfo.bytesTotal;				}			}			progressHolder = totalProgress;			totalProgress = 0;			trace((progressHolder/pData.preloadedImages) * 100);		}				function calculateProgress(element:*, index:int, arr:Array):void		{			if(element)			{				trace("index:" + index + " " + element + " + " + totalProgress + " = " + (totalProgress+= element));				totalProgress += element;			}		}								*/						//init function		function init():void		{			pData.resumePosition = resumePosition;			pData.preloadedLoaders = preloadedImages;									//initialize portfolio			portfolio = new Portfolio(pData);			portfolio.addEventListener("imagesComplete", function(e:Event):void			{				portfolio.x = stage.stageWidth + pData.padding;				portfolio.y = pData.padding;				//portfolio.width = 30000;				portfolio.alpha = 0;				addChildAt(portfolio, this.numChildren);				//trace(portfolio.width);								Tweener.addTween(portfolio, {x:pData.padding, alpha:1, time:pData.tweenSpd * 1, onComplete:function():void				{					//scrollbar arguments: scrollbar width, scrollbar height, thumb width, track color, thumb color, thumb padding, tween speed					scrollbar = new ScrollbarH(stage.stageWidth - (pData.padding * 2) - (pData.scrollbarSidePadding * 2), pData.scrollbarHeight, pData.thumbWidth, pData.trackColor, pData.thumbColor, pData.thumbRadius, pData.tweenSpd, pData.glide);					//scrollTo arguments: last item width, scroll content, last item x					scrollbar.resizeScrollbar(stage.stageWidth - (pData.padding * 2) - (pData.scrollbarSidePadding * 2));					scrollbar.x = pData.padding + pData.scrollbarSidePadding;					scrollbar.y = portfolio.height + pData.scrollbarTopPadding;					scrollbar.alpha = 0;					addChild(scrollbar);					scrollbar.scrollObject(portfolio, pData.padding);					Tweener.addTween(scrollbar, {alpha:1, time:pData.tweenSpd});										stage.addEventListener(Event.RESIZE, function(e:Event):void				{					adjustBackground();					scrollbar.resizeScrollbar(stage.stageWidth - (pData.padding * 2) - (pData.scrollbarSidePadding * 2));					//scrollbar.alignContent();				});				}});								//scrollbar.alignContent();			});			//portfolio.lastImage = preloadedImages[preloadedImages.length - 1];																	}				//adjustBackground function		function adjustBackground():void		{			//draw a shape the size of the stage			with(graphics)			{				clear();				lineStyle();				beginFill(pData.bgColor);				drawRect(0,0,stage.stageWidth, stage.stageHeight);				endFill();			}		}	}}