package shammel.classes{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.utils.*;	import shammel.classes.*;		public class Portfolio extends Sprite	{		//private vars		private var pData:Object;		private var totalImages:uint;		//private var remainingImages:uint;		private var imagesToLoad:uint;		private var infoCard:InfoCard;		private var projectImage:ProjectImage;		private var imageX:Number;		private var loadedLoaderCount:uint;		private var currSection:uint;		private var portfolioSection:PortfolioSection;		private var rIndex:Array;		private var rIndex2:Array;		private var sectionPositionFound:Boolean;		private var projectPositionFound:Boolean;		private var imagePositionFound:Boolean;		private var addPositionFound:Boolean;		private var rImageArray:Array;		private var imagesComplete:uint;		private var imagesAdded:uint;		private var delay:Timer;		private var pContainer:Sprite;		private var projectX:Number;		private var pName:uint;				//public vars		public var lastImageWidth:Number;								public function Portfolio(portfolioData:Object):void		{			pData = portfolioData;			rIndex =		new Array();			rIndex[0] =		pData.resumePosition[0];			rIndex[1] =		pData.resumePosition[1];			rIndex[2] =		pData.resumePosition[2];			rIndex2 =		new Array();			rIndex2[0] =	pData.resumePosition[0];			rIndex2[1] =	pData.resumePosition[1];			rIndex2[2] =	pData.resumePosition[2];			init();		}				//init function		private function init():void		{			getTotalImages();			createInfoCard();		}				//getTotalImages function		private function getTotalImages():void		{			for(var j:uint = 0; j < uint(pData.projects.section.length());j++)			{				for(var k:uint = 0; k < uint(pData.projects.section[j].project.length());k++)				{					totalImages += uint(pData.projects.section[j].project[k].@numberOfImages);									}			}			//remainingImages = totalImages - pData.preloadedImages;			//trace(remainingImages + " images left to load");		}//end getTotalImages				//createInfoCard function		private function createInfoCard():void		{			infoCard = new InfoCard(pData)			addChild(infoCard);			projectX = infoCard.width + pData.infoCardRightMargin;			//addPreloadedImages();			loadImages();		}//end createInfoCard				//loadImages function		private function loadImages():void		{			imagesToLoad = 0;			rImageArray = new Array();			for(var a:uint = 0;a < pData.projects.section.length();a++)			{				for(var b:uint = 0;b < pData.projects.section[a].project.length();b++)				{					for(var c:uint = 1;c < uint(pData.projects.section[a].project[b].@numberOfImages) + 1;c++)					{						projectImage = new ProjectImage();						rImageArray[imagesToLoad] = projectImage;						rImageArray[imagesToLoad].imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, updateCompleteImages);						rImageArray[imagesToLoad].imageLoader.load(new URLRequest(pData.imageDirectory + pData.projects.section[a].project[b].@imagePrefix + c + "." + pData.projects.section[a].@imageFormat));						imagesToLoad++;					}				}			}		}				//updateCompleteImages function		private function updateCompleteImages(e:Event):void		{			imagesComplete++;			//trace("images complete:" + imagesComplete + " total Images:" + totalImages);			if(imagesComplete == totalImages)			{				addImages();			}		}				//addImages function		private function addImages():void		{			pName = 0;			imagesAdded = 0;			for(var a:uint = 0; a < pData.projects.section.length();a++)			{				projectX = this.width + pData.projectSpacing;				portfolioSection = new PortfolioSection(pData, pData.projects.section[a].@category);				portfolioSection.x = projectX + 15;				addChild(portfolioSection);				projectX += portfolioSection.width + 15;				for(var b:uint = 0;b < pData.projects.section[a].project.length();b++)				{					pContainer = new Sprite();					//pContainer.name = String(pName);					//trace(pContainer.name);					pContainer.x = projectX;					addChildAt(pContainer, 0);					imageX = 0;					pName++;					for(var c:uint = 1;c < uint(pData.projects.section[a].project[b].@numberOfImages) + 1;c++)					{						//trace(a + "|" + b + "|" + c);						if(String(pData.projects.section[a].project[b].@url).length > 0)						{							rImageArray[imagesAdded].setURL(pData.projects.section[a].project[b].@url);						}						rImageArray[imagesAdded].name = imagesAdded;						rImageArray[imagesAdded].addLabel(pData, pData.projects.section[a].project[b].@title, pData.projects.section[a].project[b].@description);						pContainer.addChild(rImageArray[imagesAdded]);						rImageArray[imagesAdded].x = imageX;						projectX = pContainer.x + pContainer.width;						//getChildByName(String(pName)).getChildByName(String(imagesAdded)).x = imageX;						imageX += rImageArray[imagesAdded].width + pData.artworkSpacing;						projectX = pContainer.x + pContainer.width + pData.projectSpacing;												imagesAdded++;												//lastImageWidth = rImageArray[imagesAdded].width;												/*if(c == uint(pData.projects.section[a].project[b].@numberOfImages))						{							addChildAt(rImageArray[imagesAdded], this.numChildren);							rImageArray[imagesAdded].x = imageX;							imageX += rImageArray[imagesAdded].width + pData.projectSpacing;							rImageArray[imagesAdded].addLabel(pData, pData.projects.section[a].project[b].@title, pData.projects.section[a].project[b].@description);							lastImageWidth = rImageArray[imagesAdded].width;						}else						{							addChildAt(rImageArray[imagesAdded], this.numChildren);							rImageArray[imagesAdded].x = imageX;							imageX += rImageArray[imagesAdded].width + pData.artworkSpacing;							rImageArray[imagesAdded].addLabel(pData, pData.projects.section[a].project[b].@title, pData.projects.section[a].project[b].@description);							lastImageWidth = rImageArray[imagesAdded].width;						}*/					}				}			}			dispatchEvent(new Event("imagesComplete"));			/*delay = new Timer(1000, 1);			delay.addEventListener(TimerEvent.TIMER_COMPLETE, function(e:TimerEvent):void			{				dispatchEvent(new Event("imagesComplete"));				//trace("timer complete");			});			delay.start();*/		}//end addImages	}}